/**
 * üéØ VALIDA√á√ÉO FINAL - DADOS DIN√ÇMICOS CONFIRMADA
 * Baseado na estrutura real da API de produ√ß√£o
 */

const https = require('https');

function testEndpoint(url) {
    return new Promise((resolve, reject) => {
        const req = https.get(url, (res) => {
            let data = '';
            res.on('data', chunk => data += chunk);
            res.on('end', () => {
                if (res.statusCode === 200) {
                    try {
                        resolve(JSON.parse(data));
                    } catch (error) {
                        reject(new Error(`JSON inv√°lido: ${error.message}`));
                    }
                } else {
                    reject(new Error(`Status ${res.statusCode}`));
                }
            });
        });
        
        req.on('error', reject);
        req.setTimeout(3000, () => {
            req.destroy();
            reject(new Error('Timeout'));
        });
    });
}

async function validateDynamicDataFinal() {
    console.log('üéØ VALIDA√á√ÉO FINAL - DADOS DIN√ÇMICOS');
    console.log('====================================');
    
    const url = 'https://sofiaia.roilabs.com.br/api/dashboard/overview';
    
    try {
        // Primeira chamada
        console.log('üìû Primeira chamada...');
        const response1 = await testEndpoint(url);
        const data1 = response1.data;
        
        console.log(`‚úÖ Conversas: ${data1.stats.conversations_today}`);
        console.log(`‚úÖ Taxa convers√£o: ${data1.stats.conversion_rate}%`);
        console.log(`‚úÖ Leads qualificados: ${data1.stats.qualified_leads}`);
        console.log(`‚úÖ Growth rate: ${data1.stats.growth_rate}`);
        console.log(`‚úÖ Last updated: ${data1.last_updated}`);
        
        // Aguarda 3 segundos
        console.log('\\n‚è≥ Aguardando 3 segundos...');
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // Segunda chamada
        console.log('\\nüìû Segunda chamada...');
        const response2 = await testEndpoint(url);
        const data2 = response2.data;
        
        console.log(`‚úÖ Conversas: ${data2.stats.conversations_today}`);
        console.log(`‚úÖ Taxa convers√£o: ${data2.stats.conversion_rate}%`);
        console.log(`‚úÖ Leads qualificados: ${data2.stats.qualified_leads}`);
        console.log(`‚úÖ Growth rate: ${data2.stats.growth_rate}`);
        console.log(`‚úÖ Last updated: ${data2.last_updated}`);
        
        // An√°lise de dinamismo
        console.log('\\nüîç AN√ÅLISE DE DINAMISMO:');
        console.log('========================');
        
        let dynamicFields = 0;
        
        // Timestamp sempre deve mudar (mais cr√≠tico)
        if (data1.last_updated !== data2.last_updated) {
            console.log('‚úÖ TIMESTAMP DIN√ÇMICO - Sistema atualizando!');
            dynamicFields++;
        } else {
            console.log('‚ö†Ô∏è  Timestamp id√™ntico - Poss√≠vel cache');
        }
        
        // Verificar se growth_rate √© din√¢mico
        if (data1.stats.growth_rate !== data2.stats.growth_rate) {
            console.log('‚úÖ GROWTH RATE DIN√ÇMICO!');
            dynamicFields++;
        } else {
            console.log('üìä Growth rate est√°vel');
        }
        
        // Verificar activity_chart (deve ter varia√ß√µes)
        const chart1 = JSON.stringify(data1.activity_chart);
        const chart2 = JSON.stringify(data2.activity_chart);
        if (chart1 !== chart2) {
            console.log('‚úÖ GR√ÅFICO DE ATIVIDADE DIN√ÇMICO!');
            dynamicFields++;
        } else {
            console.log('üìä Gr√°fico de atividade est√°vel');
        }
        
        // Verificar leads_by_status
        const leads1 = JSON.stringify(data1.leads_by_status);
        const leads2 = JSON.stringify(data2.leads_by_status);
        if (leads1 !== leads2) {
            console.log('‚úÖ DISTRIBUI√á√ÉO DE LEADS DIN√ÇMICA!');
            dynamicFields++;
        } else {
            console.log('üìä Distribui√ß√£o de leads est√°vel');
        }
        
        console.log('\\nüéØ RESULTADO FINAL:');
        console.log('===================');
        
        if (dynamicFields > 0) {
            console.log(`üéâ DADOS DIN√ÇMICOS CONFIRMADOS! (${dynamicFields} campos din√¢micos)`);
            console.log('‚úÖ Sistema Sofia IA est√° funcionando corretamente');
            console.log('‚úÖ Backend gerando dados em tempo real');
            console.log('‚úÖ API de produ√ß√£o operacional');
            console.log('\\nüöÄ PR√ìXIMO PASSO: Conectar frontend √† produ√ß√£o');
        } else {
            console.log('‚ö†Ô∏è  Dados podem estar em cache ou est√°ticos');
            console.log('‚ùì Verificar configura√ß√£o de cache da API');
        }
        
    } catch (error) {
        console.log(`‚ùå ERRO: ${error.message}`);
    }
}

validateDynamicDataFinal();