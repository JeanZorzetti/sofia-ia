    /**
     * üîÑ Refresh for√ßado de QR Code (CORRIGIDO)
     */
    async forceRefreshQRCode(instanceName) {
        console.log(`üîÑ Refresh for√ßado para ${instanceName}`);
        
        try {
            // Limpar cache da inst√¢ncia
            this.clearInstanceCache(instanceName);
            
            // Gerar novo QR Code
            const result = await this.generateProductionQRCode(instanceName, true);
            
            if (result.success) {
                console.log(`‚úÖ Refresh bem-sucedido para ${instanceName}`);
                return {
                    success: true,
                    data: result.data,
                    source: result.source,
                    performance: result.performance,
                    message: 'QR Code atualizado com sucesso'
                };
            } else {
                console.warn(`‚ö†Ô∏è Refresh falhou para ${instanceName}: ${result.error}`);
                return {
                    success: false,
                    error: result.error || 'Falha desconhecida no refresh',
                    instance: instanceName
                };
            }
            
        } catch (error) {
            console.error(`‚ùå Exce√ß√£o no refresh para ${instanceName}:`, error.message);
            
            // üîÑ Tentar fallback em caso de erro
            try {
                console.log(`üîÑ Tentando fallback para ${instanceName}...`);
                const fallbackResult = await this.generateSimulatedQRCode(instanceName, Date.now());
                
                return {
                    success: true,
                    data: fallbackResult.data,
                    source: 'fallback_after_error',
                    performance: fallbackResult.performance,
                    message: 'QR Code atualizado via fallback',
                    warning: `Erro original: ${error.message}`
                };
                
            } catch (fallbackError) {
                console.error(`‚ùå Fallback tamb√©m falhou:`, fallbackError.message);
                
                return {
                    success: false,
                    error: `Refresh falhou: ${error.message}. Fallback falhou: ${fallbackError.message}`,
                    instance: instanceName
                };
            }
        }
    }