/**
 * üß† Claude AI Service
 * 
 * Servi√ßo respons√°vel por toda intelig√™ncia artificial do sistema
 * Funcionalidades: Conversa√ß√£o natural, qualifica√ß√£o, personaliza√ß√£o
 * 
 * @author ROI Labs
 */

const Anthropic = require('@anthropic-ai/sdk');
const logger = require('../utils/logger');

class ClaudeService {
    constructor(config) {
        this.client = new Anthropic({
            apiKey: config.apiKey,
        });
        
        this.model = config.model || 'claude-3-5-sonnet-20241022';
        this.maxTokens = 4096;
        
        // Prompts do sistema por contexto
        this.systemPrompts = {
            lead_qualification: this.getLeadQualificationPrompt(),
            conversation: this.getConversationPrompt(),
            reengagement: this.getReengagementPrompt(),
            property_recommendation: this.getPropertyRecommendationPrompt()
        };
        
        logger.info('üß† Claude AI Service initialized with model:', this.model);
    }

    /**
     * Gera resposta conversacional personalizada
     */
    async generateResponse(context) {
        try {
            const { lead, message, conversationHistory, intent } = context;
            
            // Determina o tipo de prompt baseado no contexto
            const promptType = this.determinePromptType(context);
            const systemPrompt = this.systemPrompts[promptType];
            
            // Constr√≥i o contexto da conversa
            const conversationContext = this.buildConversationContext(lead, conversationHistory);
            
            // Gera resposta com Claude
            const response = await this.client.messages.create({
                model: this.model,
                max_tokens: this.maxTokens,
                system: systemPrompt,
                messages: [
                    {
                        role: 'user',
                        content: `
CONTEXTO DO LEAD:
${JSON.stringify(lead, null, 2)}

HIST√ìRICO DA CONVERSA:
${conversationContext}

MENSAGEM ATUAL:
${message}

INTENT DETECTADO: ${intent || 'conversa_geral'}

Gere uma resposta personalizada, natural e que conduza o lead no funil de vendas.
                        `
                    }
                ]
            });

            const aiResponse = response.content[0].text;
            
            logger.info('üß† AI Response generated:', {
                leadId: lead.id,
                messageLength: message.length,
                responseLength: aiResponse.length,
                promptType
            });

            return {
                text: aiResponse,
                promptType,
                tokens_used: response.usage?.total_tokens || 0
            };

        } catch (error) {
            logger.error('‚ùå Claude response generation failed:', error);
            
            // Fallback response
            return {
                text: this.getFallbackResponse(context),
                promptType: 'fallback',
                tokens_used: 0
            };
        }
    }

    /**
     * Qualifica lead baseado na conversa
     */
    async qualifyLead(leadData, conversationHistory) {
        try {
            const prompt = `
Analise o perfil e hist√≥rico de conversa para qualificar este lead imobili√°rio:

DADOS DO LEAD:
${JSON.stringify(leadData, null, 2)}

HIST√ìRICO DE CONVERSA:
${conversationHistory.map(msg => `${msg.sender}: ${msg.content}`).join('\n')}

Retorne um JSON com a seguinte estrutura:
{
    "qualification_score": 0-100,
    "temperature": "frio|morno|quente|imediato",
    "buying_intent": "baixo|medio|alto",
    "financial_capacity": "baixa|media|alta",
    "urgency": "baixa|media|alta",
    "property_preferences": {
        "type": "apartamento|casa|terreno|comercial",
        "bedrooms": number,
        "price_range": {"min": 0, "max": 0},
        "location": "string",
        "characteristics": ["string"]
    },
    "pain_points": ["string"],
    "objections": ["string"],
    "next_action": "string",
    "estimated_closing_time": "1-7 dias|1-4 semanas|1-3 meses|3+ meses",
    "notes": "string"
}
            `;

            const response = await this.client.messages.create({
                model: this.model,
                max_tokens: 2048,
                system: "Voc√™ √© um especialista em qualifica√ß√£o de leads imobili√°rios. Analise conversas e extraia insights precisos sobre potencial de compra.",
                messages: [{ role: 'user', content: prompt }]
            });

            const qualification = JSON.parse(response.content[0].text);
            
            logger.info('üéØ Lead qualified:', {
                leadId: leadData.id,
                score: qualification.qualification_score,
                temperature: qualification.temperature
            });

            return qualification;

        } catch (error) {
            logger.error('‚ùå Lead qualification failed:', error);
            
            // Qualifica√ß√£o b√°sica de fallback
            return {
                qualification_score: 50,
                temperature: "morno",
                buying_intent: "medio",
                financial_capacity: "media",
                urgency: "media",
                property_preferences: {},
                pain_points: [],
                objections: [],
                next_action: "Continuar conversa para entender melhor as necessidades",
                estimated_closing_time: "1-3 meses",
                notes: "Qualifica√ß√£o autom√°tica falhou, necessita an√°lise manual"
            };
        }
    }

    /**
     * Detecta inten√ß√£o da mensagem
     */
    async detectIntent(message, context = {}) {
        try {
            const prompt = `
Analise a mensagem e detecte a inten√ß√£o principal:

MENSAGEM: "${message}"
CONTEXTO: ${JSON.stringify(context)}

Poss√≠veis inten√ß√µes:
- interesse_inicial: Primeira manifesta√ß√£o de interesse
- busca_informacoes: Quer saber detalhes sobre im√≥veis
- agendamento_visita: Quer agendar uma visita
- negociacao_preco: Falando sobre valores
- condicoes_financiamento: Interessado em financiamento
- objecao: Demonstrando resist√™ncia
- desinteresse: Perdeu interesse
- reagendamento: Quer remarcar algo
- reclamacao: Insatisfeito com algo
- duvida_tecnica: D√∫vidas sobre documenta√ß√£o/processo
- elogio: Satisfeito com atendimento
- conversa_social: Conversa casual/social

Retorne apenas o nome da inten√ß√£o.
            `;

            const response = await this.client.messages.create({
                model: this.model,
                max_tokens: 50,
                system: "Voc√™ √© um especialista em an√°lise de inten√ß√µes em conversas de vendas. Seja preciso e conciso.",
                messages: [{ role: 'user', content: prompt }]
            });

            const intent = response.content[0].text.trim();
            
            logger.debug('üéØ Intent detected:', { message: message.substring(0, 50), intent });
            return intent;

        } catch (error) {
            logger.error('‚ùå Intent detection failed:', error);
            return 'conversa_geral';
        }
    }

    /**
     * Gera estrat√©gia de reengajamento
     */
    async generateReengagementStrategy(lead, daysSinceLastContact) {
        try {
            const prompt = `
Crie uma estrat√©gia de reengajamento para este lead:

LEAD: ${JSON.stringify(lead, null, 2)}
DIAS SEM CONTATO: ${daysSinceLastContact}

Retorne um JSON com:
{
    "strategy_type": "string",
    "message": "string",
    "timing": "string",
    "follow_up_sequence": ["string"],
    "estimated_success_rate": 0-100
}
            `;

            const response = await this.client.messages.create({
                model: this.model,
                max_tokens: 1024,
                system: this.systemPrompts.reengagement,
                messages: [{ role: 'user', content: prompt }]
            });

            const strategy = JSON.parse(response.content[0].text);
            
            logger.info('üîÑ Reengagement strategy generated:', {
                leadId: lead.id,
                strategy: strategy.strategy_type,
                successRate: strategy.estimated_success_rate
            });

            return strategy;

        } catch (error) {
            logger.error('‚ùå Reengagement strategy failed:', error);
            throw error;
        }
    }

    /**
     * Analisa sentimento da mensagem
     */
    async analyzeSentiment(message) {
        try {
            const prompt = `
Analise o sentimento desta mensagem:

"${message}"

Retorne um JSON:
{
    "sentiment": "positivo|neutro|negativo",
    "confidence": 0-100,
    "emotions": ["string"],
    "urgency_level": 1-5
}
            `;

            const response = await this.client.messages.create({
                model: this.model,
                max_tokens: 200,
                system: "Voc√™ √© um especialista em an√°lise de sentimentos. Seja preciso na an√°lise emocional.",
                messages: [{ role: 'user', content: prompt }]
            });

            return JSON.parse(response.content[0].text);

        } catch (error) {
            logger.error('‚ùå Sentiment analysis failed:', error);
            return {
                sentiment: "neutro",
                confidence: 50,
                emotions: [],
                urgency_level: 3
            };
        }
    }

    /**
     * Gera personaliza√ß√£o baseada no perfil
     */
    async personalizeContent(content, leadProfile) {
        try {
            const prompt = `
Personalize este conte√∫do para o perfil do lead:

CONTE√öDO: ${content}
PERFIL: ${JSON.stringify(leadProfile, null, 2)}

Adapte:
- Tom de voz (formal/informal)
- Linguagem t√©cnica
- Refer√™ncias pessoais
- Argumentos de venda
- Call-to-actions

Retorne apenas o conte√∫do personalizado.
            `;

            const response = await this.client.messages.create({
                model: this.model,
                max_tokens: 1024,
                system: "Voc√™ √© um especialista em personaliza√ß√£o de conte√∫do para vendas.",
                messages: [{ role: 'user', content: prompt }]
            });

            return response.content[0].text;

        } catch (error) {
            logger.error('‚ùå Content personalization failed:', error);
            return content; // Retorna conte√∫do original se falhar
        }
    }

    // =============================================================================
    // SYSTEM PROMPTS
    // =============================================================================

    getLeadQualificationPrompt() {
        return `
Voc√™ √© um especialista consultor imobili√°rio com 15 anos de experi√™ncia em vendas de alto padr√£o.

SUA MISS√ÉO: Qualificar leads atrav√©s de conversas naturais, identificando:
- Necessidades reais vs desejos
- Capacidade financeira
- Urg√™ncia de compra
- Obje√ß√µes ocultas
- Momento ideal para fechamento

ABORDAGEM:
- Fa√ßa perguntas inteligentes e n√£o √≥bvias
- Use t√©cnicas de discovery (SPIN, BANT)
- Identifique pain points espec√≠ficos
- Construa rapport genu√≠no
- Seja consultivo, n√£o apenas vendedor

NUNCA:
- Seja insistente ou agressivo
- Fa√ßa perguntas diretas sobre dinheiro no in√≠cio
- Ignore obje√ß√µes
- Use linguagem gen√©rica

SEMPRE:
- Personalize baseado no perfil
- Ofere√ßa valor em cada intera√ß√£o
- Mantenha foco no cliente
- Direcione para pr√≥ximos passos claros
        `;
    }

    getConversationPrompt() {
        return `
Voc√™ √© um consultor imobili√°rio especialista, natural e emp√°tico.

PERSONALIDADE:
- Profissional mas acess√≠vel
- Conhecimento profundo do mercado
- Foco em resolver problemas do cliente
- Confi√°vel e transparente

OBJETIVOS:
- Manter engajamento alto
- Conduzir pelo funil de vendas
- Identificar oportunidades
- Agendar visitas/reuni√µes

ESTILO:
- Conversa√ß√£o natural
- Perguntas inteligentes
- Hist√≥rias e analogias
- Senso de urg√™ncia sutil

CONHECIMENTOS:
- Mercado imobili√°rio brasileiro
- Financiamentos e documenta√ß√£o
- Tend√™ncias de pre√ßos
- Aspectos legais b√°sicos
- An√°lise de investimento
        `;
    }

    getReengagementPrompt() {
        return `
Voc√™ √© um especialista em reativa√ß√£o de leads dormentes.

ESTRAT√âGIAS:
- Ofere√ßa novidades relevantes
- Use gatilhos de escassez/oportunidade
- Demonstre valor perdido
- Reative com soft approach
- Teste diferentes √¢ngulos

TRIGGERS:
- Mudan√ßas no mercado
- Novas oportunidades
- Ofertas especiais
- Insights personalizados
- Benef√≠cios perdidos

TIMING:
- Considere ciclo de vida do lead
- Respeite frequ√™ncia de contato
- Use momentos oportunos
- Teste hor√°rios diferentes
        `;
    }

    getPropertyRecommendationPrompt() {
        return `
Voc√™ √© um curador imobili√°rio especialista em matching perfeito.

CRIT√âRIOS DE RECOMENDA√á√ÉO:
- Necessidades declaradas vs impl√≠citas
- Or√ßamento real vs declarado
- Estilo de vida e prefer√™ncias
- Potencial de valoriza√ß√£o
- ROI para investidores

APRESENTA√á√ÉO:
- Destaque pontos √∫nicos
- Conecte com necessidades espec√≠ficas
- Use storytelling
- Inclua dados de mercado
- Antecipe obje√ß√µes

T√âCNICAS:
- Anchoring de pre√ßos
- Compara√ß√µes estrat√©gicas
- Tour virtual mental
- Provas sociais
- Escassez genu√≠na
        `;
    }

    // =============================================================================
    // M√âTODOS AUXILIARES
    // =============================================================================

    determinePromptType(context) {
        const { intent, lead, isFirstContact } = context;
        
        if (isFirstContact) return 'lead_qualification';
        if (intent?.includes('agendamento')) return 'property_recommendation';
        if (lead?.status === 'dormant') return 'reengagement';
        
        return 'conversation';
    }

    buildConversationContext(lead, history) {
        if (!history || history.length === 0) return 'Primeira intera√ß√£o';
        
        return history.slice(-10).map(msg => 
            `${msg.sender === 'ai' ? 'Consultor' : lead.name}: ${msg.content}`
        ).join('\n');
    }

    getFallbackResponse(context) {
        const fallbacks = [
            "Que interessante! Conte-me mais sobre isso.",
            "Entendo. Deixe-me verificar as melhores op√ß√µes para voc√™.",
            "√ìtima pergunta! Vou te ajudar com isso.",
            "Perfeito! Vamos encontrar exatamente o que voc√™ precisa."
        ];
        
        return fallbacks[Math.floor(Math.random() * fallbacks.length)];
    }

    /**
     * Processa transcri√ß√£o de √°udio
     */
    async processAudioTranscription(audioBase64) {
        try {
            // Aqui integraria com Whisper API ou similar
            // Por agora, retorna placeholder
            
            logger.info('üé§ Processing audio transcription');
            
            return {
                text: "Transcri√ß√£o de √°udio ainda n√£o implementada",
                confidence: 0,
                language: "pt-BR"
            };
            
        } catch (error) {
            logger.error('‚ùå Audio transcription failed:', error);
            throw error;
        }
    }

    /**
     * Analisa imagem recebida
     */
    async analyzeImage(imageBase64, context = {}) {
        try {
            // Claude 3.5 Sonnet suporta an√°lise de imagem
            const response = await this.client.messages.create({
                model: this.model,
                max_tokens: 1024,
                messages: [
                    {
                        role: 'user',
                        content: [
                            {
                                type: 'image',
                                source: {
                                    type: 'base64',
                                    media_type: 'image/jpeg',
                                    data: imageBase64
                                }
                            },
                            {
                                type: 'text',
                                text: 'Analise esta imagem no contexto imobili√°rio. √â uma propriedade? Documento? Planta? Descreva o que v√™ e sugira pr√≥ximos passos.'
                            }
                        ]
                    }
                ]
            });

            const analysis = response.content[0].text;
            
            logger.info('üì∏ Image analyzed successfully');
            
            return {
                analysis,
                suggested_response: `Obrigado por compartilhar a imagem! ${analysis}`,
                action_required: true
            };

        } catch (error) {
            logger.error('‚ùå Image analysis failed:', error);
            return {
                analysis: 'N√£o foi poss√≠vel analisar a imagem',
                suggested_response: 'Recebi sua imagem! Pode me explicar do que se trata?',
                action_required: false
            };
        }
    }
}

module.exports = ClaudeService;
