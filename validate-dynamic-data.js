/**
 * üîç VALIDA√á√ÉO DE DADOS DIN√ÇMICOS
 * Testa se os dados do dashboard mudam entre chamadas
 */

const http = require('http');

function testEndpoint(path) {
    return new Promise((resolve, reject) => {
        const req = http.get(`http://localhost:8000${path}`, (res) => {
            let data = '';
            res.on('data', chunk => data += chunk);
            res.on('end', () => {
                if (res.statusCode === 200) {
                    try {
                        resolve(JSON.parse(data));
                    } catch (error) {
                        reject(new Error(`JSON inv√°lido: ${error.message}`));
                    }
                } else {
                    reject(new Error(`Status ${res.statusCode}`));
                }
            });
        });
        
        req.on('error', reject);
        req.setTimeout(3000, () => {
            req.destroy();
            reject(new Error('Timeout'));
        });
    });
}

async function validateDynamicData() {
    console.log('üîç VALIDANDO DADOS DIN√ÇMICOS DO DASHBOARD');
    console.log('==========================================');
    
    try {
        // Primeira chamada
        console.log('üìû Primeira chamada...');
        const data1 = await testEndpoint('/api/dashboard/overview');
        console.log(`‚úÖ Conversas: ${data1.conversationsToday}`);
        console.log(`‚úÖ Taxa convers√£o: ${data1.conversionRate}%`);
        console.log(`‚úÖ Leads qualificados: ${data1.qualifiedLeads}`);
        
        // Aguarda 2 segundos
        console.log('\n‚è≥ Aguardando 2 segundos...\n');
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Segunda chamada
        console.log('üìû Segunda chamada...');
        const data2 = await testEndpoint('/api/dashboard/overview');
        console.log(`‚úÖ Conversas: ${data2.conversationsToday}`);
        console.log(`‚úÖ Taxa convers√£o: ${data2.conversionRate}%`);
        console.log(`‚úÖ Leads qualificados: ${data2.qualifiedLeads}`);
        
        // Compara√ß√£o
        console.log('\nüîç AN√ÅLISE DE DINAMISMO:');
        console.log('========================');
        
        let differences = 0;
        
        if (data1.conversationsToday !== data2.conversationsToday) {
            console.log('‚úÖ Conversas DIN√ÇMICAS - Valores diferentes!');
            differences++;
        } else {
            console.log('‚ö†Ô∏è  Conversas EST√ÅTICAS - Mesmo valor');
        }
        
        if (data1.conversionRate !== data2.conversionRate) {
            console.log('‚úÖ Taxa convers√£o DIN√ÇMICA - Valores diferentes!');
            differences++;
        } else {
            console.log('‚ö†Ô∏è  Taxa convers√£o EST√ÅTICA - Mesmo valor');
        }
        
        if (data1.qualifiedLeads !== data2.qualifiedLeads) {
            console.log('‚úÖ Leads qualificados DIN√ÇMICOS - Valores diferentes!');
            differences++;
        } else {
            console.log('‚ö†Ô∏è  Leads qualificados EST√ÅTICOS - Mesmo valor');
        }
        
        // Verifica se existe timestamp ou campo que muda
        if (data1.timestamp && data2.timestamp && data1.timestamp !== data2.timestamp) {
            console.log('‚úÖ Timestamp DIN√ÇMICO - Sistema atualizando!');
            differences++;
        }
        
        console.log('\nüéØ RESULTADO FINAL:');
        console.log('===================');
        
        if (differences > 0) {
            console.log(`üéâ DADOS DIN√ÇMICOS CONFIRMADOS! (${differences} campos mudaram)`);
            console.log('‚úÖ Sistema est√° gerando dados em tempo real');
        } else {
            console.log('‚ö†Ô∏è  POSS√çVEIS DADOS HARDCODED - Nenhum campo mudou');
            console.log('‚ùì Verifique se o backend est√° simulando corretamente');
        }
        
    } catch (error) {
        console.log(`‚ùå ERRO: ${error.message}`);
    }
}

validateDynamicData();